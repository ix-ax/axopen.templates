@page "/Settings/settings"
@inject NavigationManager NavigationManager

<label>@Localizer["Choose a theme"]</label>
<select class="form-control" @bind="Theme" @bind:event="oninput">
    <option value="light">Light</option>
    <option value="dark">Dark</option>
</select>

<label>@Localizer["Choose a theme color"]</label>
<select class="form-control" @bind="ThemeColor" @bind:event="oninput">
    @foreach (var themeColor in supportedThemeColors)
    {
        <option value="@themeColor">@themeColor</option>
    }
</select>

<label>@Localizer["Choose a culture"]</label>
<select class="form-control" @bind="Culture" @bind:event="oninput">
    @foreach (var culture in supportedCultures)
    {
        <option data value="@culture">@culture.NativeName</option>
    }
</select>

@code {
    [Inject]
    IHttpContextAccessor HttpContextAccessor { get; set; }

    private string _theme;
    public string Theme
    {
        get => _theme;
        set
        {
            // Prevent initial navigation (causes error)
            if (_theme == null)
            {
                _theme = value;
                return;
            }

            // Prevent unnecessary navigation
            if (_theme != value)
            {
                _theme = value;
                NavigationManager.NavigateTo($"/theme?theme={_theme}", true);
            }
        }
    }

    private string defaultThemeColor = "Bootstrap";
    private string[] supportedThemeColors = new[]
    {
        "Bootstrap",
        "MTS",
        "Tropical",
        "Jupiter"
    };

    private string _themeColor;
    public string ThemeColor
    {
        get => _themeColor;
        set
        {
            // Prevent initial navigation (causes error)
            if (_themeColor == null)
            {
                _themeColor = value;
                return;
            }

            // Prevent unnecessary navigation
            if (_themeColor != value)
            {
                _themeColor = value;
                NavigationManager.NavigateTo($"/themeColor?themeColor={_themeColor}", true);
            }
        }
    }

    private CultureInfo[] supportedCultures = new[]
    {
        new CultureInfo("en-US"),
        new CultureInfo("sk-SK"),
        new CultureInfo("es-ES")
    };

    private CultureInfo Culture
    {
        get => CultureInfo.CurrentCulture;
        set
        {
            // Prevent unnecessary navigation
            if (!Equals(CultureInfo.CurrentCulture, value) && !Equals(CultureInfo.CurrentUICulture, value))
            {
                var cultureEscaped = Uri.EscapeDataString(value.Name);
                NavigationManager.NavigateTo($"/culture?culture={cultureEscaped}", true);
            }
        }
    }

    protected override void OnInitialized()
    {
        Theme = HttpContextAccessor.HttpContext.Request.Cookies["Theme"] ?? "light";
        ThemeColor = HttpContextAccessor.HttpContext.Request.Cookies["ThemeColor"] ?? defaultThemeColor;
        Culture = CultureInfo.CurrentCulture;
    }
}
